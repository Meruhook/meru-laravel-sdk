name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional - will use CHANGELOG.md if empty)'
        required: false
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi

      - name: Extract release notes from CHANGELOG
        id: changelog
        run: |
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            echo "Using provided release notes"
            cat << 'EOF' > release_notes.md
          ${{ github.event.inputs.release_notes }}
          EOF
          else
            echo "Extracting from CHANGELOG.md"
            # Extract unreleased section from CHANGELOG.md
            awk '/## \[Unreleased\]/{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
            
            # If no unreleased section found, create generic notes
            if [[ ! -s release_notes.md ]]; then
              echo "Release v${{ github.event.inputs.version }}" > release_notes.md
              echo "" >> release_notes.md
              echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
            fi
          fi

      - name: Update CHANGELOG.md
        run: |
          # Replace [Unreleased] with version and date
          sed -i "s/## \[Unreleased\]/## [v${{ github.event.inputs.version }}] - $(date +%Y-%m-%d)/" CHANGELOG.md
          
          # Add new Unreleased section at the top
          sed -i '/^## \[v/i ## [Unreleased]\n\n### Added\n\n### Changed\n\n### Deprecated\n\n### Removed\n\n### Fixed\n\n### Security\n' CHANGELOG.md

      - name: Commit CHANGELOG update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v${{ github.event.inputs.version }}" || echo "No changes to commit"

      - name: Create and push tag
        run: |
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"
          git push origin main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Packagist update
        if: success()
        run: |
          if [[ -n "${{ secrets.PACKAGIST_TOKEN }}" && -n "${{ secrets.PACKAGIST_USERNAME }}" ]]; then
            echo "Triggering Packagist update..."
            curl -XPOST -H 'content-type:application/json' \
              "https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}" \
              -d '{"repository":{"url":"https://github.com/${{ github.repository }}"}}'
          else
            echo "‚ö†Ô∏è  Packagist credentials not configured. Please:"
            echo "   1. Go to https://packagist.org/profile/"
            echo "   2. Generate an API token"
            echo "   3. Add PACKAGIST_USERNAME and PACKAGIST_TOKEN secrets to this repository"
            echo "   4. Or set up auto-update webhook at https://packagist.org/packages/meruhook/meruhook-sdk"
          fi

      - name: Release Summary
        if: success()
        run: |
          echo "üéâ Release v${{ github.event.inputs.version }} created successfully!"
          echo ""
          echo "üì¶ Package: meruhook/meruhook-sdk"
          echo "üè∑Ô∏è  Tag: v${{ github.event.inputs.version }}"
          echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }}"
          echo ""
          echo "‚úÖ Code quality already verified by PR checks"
          echo "üì¶ Packagist should automatically update within a few minutes"
          echo "üîó Verify at: https://packagist.org/packages/meruhook/meruhook-sdk"